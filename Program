#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ROUNDS 3
#define MAX_NAME 25


typedef struct player{
        char* Full_Name;
        int player_ID;
        double batting_rating;
        double defense_rating;
        double pitching_rating;
}Player;

typedef struct node{
        Player player;
        struct node* next;
}node_t;

node_t* Generate_Draft_List(char* File, int number_of_players);
node_t* add_node(node_t* head_of_list, Player playa);

void test_output(node_t* head);
void Draft(node_t** head_a, node_t** head_b, node_t** head_c, node_t** draft_list, char* team_a, char* team_b, char* team_c);
double computeAverage(node_t* Team_List);
void Free_List(node_t* linked_list);
void output_draft(node_t** tA, node_t** tB, node_t** tC, node_t* list, int ID, int team);
void print_average(double teamA_average, double teamB_average, double teamC_average);
void BONUSdraft(node_t** heada, node_t** headb, node_t** headc, node_t** draft_list, char* team_a, char* team_b, char* team_c, char* draft_order);

int main(int argc, char* argv[])
{
        if(argc != 7)
        {
                printf("Incorrect input\n./a.out <size of player list> <player_list.txt> <priority list A> <priority list B> <priority list C> <***BONUS LIST***\n");
        return 0;
        }

        int num=atoi(argv[1]);

node_t* draft_list=Generate_Draft_List(argv[2], num);

        test_output(draft_list);

        node_t* teamA=(node_t*)malloc(sizeof(node_t));
        teamA->next=NULL;

        node_t* teamB=(node_t*)malloc(sizeof(node_t));
        teamB->next=NULL;

        node_t* teamC=(node_t*)malloc(sizeof(node_t));
        teamC->next=NULL;


        Draft(&teamA, &teamB, &teamC, &draft_list, argv[3], argv[4], argv[5]);

        printf("\n***TEAM A***\n");
        test_output(teamA);
        printf("\n***TEAM B***\n");
        test_output(teamB);
        printf("\n***TEAM C***\n");
        test_output(teamC);

        double teamA_average=computeAverage(teamA);
        double teamB_average=computeAverage(teamB);
        double teamC_average=computeAverage(teamC);

        print_average(teamA_average, teamB_average, teamC_average);

Free_List(draft_list);
Free_List(teamA);
Free_List(teamB);
Free_List(teamC);

printf("\n\n***************************************BONUS********************************************\n\n");
        node_t* bonus_list=Generate_Draft_List(argv[2], num);
        node_t* bonusA=(void*)malloc(sizeof(node_t));
        bonusA->player.Full_Name=NULL;
        bonusA->next=NULL;

      node_t* bonusB=(void*)malloc(sizeof(node_t));
       bonusB->player.Full_Name=NULL;
        bonusB->next=NULL;

       node_t* bonusC=(void*)malloc(sizeof(node_t));
       bonusC->player.Full_Name=NULL;
        bonusC->next=NULL;

       BONUSdraft(&bonusA, &bonusB, &bonusC, &bonus_list, argv[3], argv[4], argv[5], argv[6]);

        printf("\n***TEAM A***\n");
        test_output(bonusA);
        printf("\n***TEAM B***\n");
        test_output(bonusB);
        printf("\n***TEAM C***\n");
       test_output(bonusC);

        double bonusA_average=computeAverage(bonusA);
        double bonusB_average=computeAverage(bonusB);
        double bonusC_average=computeAverage(bonusC);

        print_average(bonusA_average, bonusB_average, bonusC_average);

Free_List(bonus_list);
Free_List(bonusA);
Free_List(bonusB);
Free_List(bonusC);

fclose( stdin );
fclose( stdout );
fclose( stderr );

return 0;
}

node_t* Generate_Draft_List(char* File, int number_of_players)
{
        FILE* fptr;
        if((fptr=fopen(File, "r"))==NULL)
        {
                printf("Could not open file.");
        return NULL;
        }

        node_t* head=(node_t*)malloc(sizeof(node_t)); //malloc the head of the list
        head->player.Full_Name=NULL;
        node_t* start=head; //create utility pointer
        start->next=NULL; //set the utility pointer->next to null
        Player playa; //initialize and instance of Player
        playa.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME); //malloc space for a name
        int i=0;
        for(i=0; i<number_of_players; i++)
        {
                fscanf(fptr, "%s %d %lf %lf %lf", playa.Full_Name, &playa.player_ID, &playa.batting_rating, &playa.defense_rating, &playa.pitching_rating);

                start= add_node(start, playa); //send the pointer and new playa to add_node; return the head of the pointer

if(feof(fptr)) //if it's the end of the file, return the head of the linked list
                {
                head=start;
                return head;
                }
        }
head=start;
fclose(fptr);
free(playa.Full_Name);
return head;
}

node_t* add_node(node_t* head_of_list, Player playa)
{
        node_t* start=head_of_list; //make a pointer to the head of the list

        if(start->player.Full_Name==NULL)  //if the first item is  empty
        {
                start->player.Full_Name=malloc(sizeof(char)*MAX_NAME);
                strcpy(start->player.Full_Name, playa.Full_Name);
                start->player.player_ID=playa.player_ID;
                start->player.batting_rating=playa.batting_rating;
                start->player.defense_rating=playa.defense_rating;
                start->player.pitching_rating=playa.pitching_rating;
                start->next=NULL;
                return head_of_list;
        }
        else
        {
                while(start->next != NULL) //search the list for the end of the list
                {
                        start=start->next;
                }

                if(start->next == NULL) //if it's the end of the list, add a new node
                {
                        start->next=(node_t*)malloc(sizeof(node_t));
                        start=start->next;
                        start->player.Full_Name=malloc(sizeof(char)*MAX_NAME);
                        strcpy(start->player.Full_Name, playa.Full_Name);
                        start->player.player_ID=playa.player_ID;
                        start->player.batting_rating=playa.batting_rating;
                        start->player.defense_rating=playa.defense_rating;
                        start->player.pitching_rating=playa.pitching_rating;
                        start->next=NULL;
                        return head_of_list;
                }
        }
return head_of_list;
}

void test_output(node_t* head)
{
        while(head->next != NULL)
        {
                printf("PLAYER ID: %.d\nName: %s batting: %.2lf defense: %.2lf pitching: %.2lf\n\n", head->player.player_ID, head->player.Full_Name, head->player.batting_rating, head->player.defense_rating, head->player.pitching_rating);
        head=head->next;
       }

}

void Draft(node_t** head_a, node_t** head_b, node_t** head_c, node_t** draft_list, char* team_a, char* team_b, char* team_c)
{
        FILE* teamA; FILE* teamB; FILE* teamC;


        if((teamA=fopen(team_a, "r"))==NULL)
        {
                printf("\nCould not open Team A\n");
                return;
        }
        if((teamB=fopen(team_b, "r"))==NULL)
        {
                printf("\nCould not open Team B\n");
                return;
        }
        if((teamC=fopen(team_c, "r"))==NULL)
        {
                printf("\nCould not open Team C\n");
                return;
        }
        node_t* draftptr=(*draft_list); //make utility pointers
        node_t* temp=NULL;
        node_t* ptrA=*head_a;
        node_t* ptrB=*head_b;
        node_t* ptrC=*head_c;
        node_t* previous=NULL;

        int ID=0;;
        int i,j=0;
while(j<ROUNDS)
{
if(!feof(teamA))
{i=0;
                draftptr=(*draft_list); //reset the beginning of draftptr
                fscanf(teamA, "%d", &ID); //scan in the ID value

                if(draftptr->player.player_ID==ID) //if the ID matches the first value in the draft_list
                {
                         ptrA->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                         strcpy(ptrA->player.Full_Name, draftptr->player.Full_Name);
                         ptrA->player.player_ID=draftptr->player.player_ID;
                         ptrA->player.batting_rating=draftptr->player.batting_rating;
                         ptrA->player.defense_rating=draftptr->player.defense_rating;
                         ptrA->player.pitching_rating=draftptr->player.pitching_rating; //copy the value

                        ptrA->next=(void*)malloc(sizeof(node_t)); //malloc space for the next pointer
                        ptrA=ptrA->next;
                        ptrA->next=NULL; //set next to null


                        temp=draftptr;
                        (*draft_list)=(*draft_list)->next; //bump the draft pointer in main because we deleted the first value
                        draftptr=draftptr->next;
                        free(temp->player.Full_Name); //free the player that we just put into A
                        free(temp);

                        printf("***TEAM A***\n");
                        output_draft(head_a, head_b, head_c, *draft_list, ID, 1);

                }
                else { //if it's not at the beginning of the list
                          do{
                                previous=draftptr;
                                draftptr=draftptr->next;
                                i++;
                                if(draftptr->next==NULL) //if another team has drafted a player, we'll reach the end of the list.
                                {
                                        draftptr=*draft_list; //reset the draftptr
                                        fscanf(teamA, "%d", &ID); //scan in the next ID on the list
                                        i=0; //we'll need to know if the value we scanned in is the first value in the draft pointer. If i still = 0 when we exit the do-while, then we'll know that it was the first item. otherwhise, i !=0, and we won't change the pointer in main.
                                 }

                        }while(draftptr->player.player_ID != ID); //do while the value of ID is not at the beginning of the list

                        if(draftptr->player.player_ID == ID)
                        {
                                ptrA->player.Full_Name=malloc(sizeof(char)*MAX_NAME);
                                strcpy(ptrA->player.Full_Name, draftptr->player.Full_Name);
                                ptrA->player.player_ID=draftptr->player.player_ID;
                                ptrA->player.batting_rating=draftptr->player.batting_rating;
                                ptrA->player.defense_rating=draftptr->player.defense_rating;
                                ptrA->player.pitching_rating=draftptr->player.pitching_rating;

                                ptrA->next=(void*)malloc(sizeof(node_t)); //malloc space for the next pointer
                                ptrA=ptrA->next; //bump
                                ptrA->next=NULL; //set next to null

                                        if(i==0) //explanation in the do-while statement
                                        {
                                                (*draft_list)=(*draft_list)->next;
                                        }
                                temp=draftptr;
                                draftptr=draftptr->next;
                                previous->next=draftptr;
                                free(temp->player.Full_Name);
                                free(temp);

                                printf("***TEAM A***\n");
                                output_draft(head_a, head_b, head_c, *draft_list, ID, 1);
                        }
                }
        printf("\n");
}
        draftptr=(*draft_list);

if(!feof(teamB))
{ i=0; //reset i counter
        fscanf(teamB, "%d", &ID);
                 if(draftptr->player.player_ID==ID)     //if ID matches the first node in the draft list
                {
                        ptrB=(node_t*)malloc(sizeof(node_t));

                        ptrB->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                        strcpy(ptrB->player.Full_Name, draftptr->player.Full_Name);
                        ptrB->player.player_ID=draftptr->player.player_ID;
                        ptrB->player.batting_rating=draftptr->player.batting_rating;
                        ptrB->player.defense_rating=draftptr->player.defense_rating;
                        ptrB->player.pitching_rating=draftptr->player.pitching_rating;

                        ptrB->next=(void*)malloc(sizeof(node_t)); //malloc space for the next pointer
                        ptrB=ptrB->next; //bump
                        ptrB->next=NULL; //set next to NULL


                        temp=draftptr;
                        (*draft_list)=(*draft_list)->next;              //move the draft_list in main
                        draftptr=draftptr->next;
                        free(temp->player.Full_Name);
                        free(temp);

                         printf("***TEAM B***\n");
                        output_draft(head_a, head_b, head_c, *draft_list, ID, 2);
                }
                else {
                       do{
                                previous=draftptr;
                                draftptr=draftptr->next;
                                i++;
                                if(draftptr->next==NULL)
                                {
                                        draftptr=*draft_list;
                                        fscanf(teamB, "%d", &ID);
                                        i=0;
                                }
                        }while(draftptr->player.player_ID != ID);

                        if(draftptr->player.player_ID == ID)
                        {
                                ptrB->next=NULL;
                                ptrB->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                                strcpy(ptrB->player.Full_Name, draftptr->player.Full_Name);
                                ptrB->player.player_ID=draftptr->player.player_ID;
                                ptrB->player.batting_rating=draftptr->player.batting_rating;
                                ptrB->player.defense_rating=draftptr->player.defense_rating;
                                ptrB->player.pitching_rating=draftptr->player.pitching_rating;

                                ptrB->next=(void*)malloc(sizeof(node_t)); //malloc space for the next pointer
                                ptrB=ptrB->next; //bump
                                ptrB->next=NULL; //set next to null

                                        if(i==0)
                                        {
                                                (*draft_list)=(*draft_list)->next;
                                        }
                                temp=draftptr;
                                draftptr=draftptr->next;
                                previous->next=draftptr;
                                free(temp->player.Full_Name);
                                free(temp);
                                 printf("***TEAM B***\n");
                                output_draft(head_a, head_b, head_c, *draft_list, ID, 2);
                        }
                }
}
        draftptr=(*draft_list);
if(!feof(teamC))
{ i=0; //reset i counter
                fscanf(teamC, "%d", &ID);
                 if(draftptr->player.player_ID==ID)
                {
                        ptrC->next=NULL;
                         ptrC->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                        strcpy(ptrC->player.Full_Name, draftptr->player.Full_Name);
                        ptrC->player.player_ID=draftptr->player.player_ID;
                        ptrC->player.batting_rating=draftptr->player.batting_rating;
                        ptrC->player.defense_rating=draftptr->player.defense_rating;
                        ptrC->player.pitching_rating=draftptr->player.pitching_rating;

                        ptrC->next=(void*)malloc(sizeof(node_t)); //malloc space for the next pointer
                        ptrC=ptrC->next; //bump
                        ptrC->next=NULL; //set next to null

                        temp=draftptr;
                        (*draft_list)=(*draft_list)->next;
                        draftptr=draftptr->next;
                        free(temp->player.Full_Name);
                        free(temp);

                        printf("***TEAM C***\n");
                        output_draft(head_a, head_b, head_c, *draft_list,  ID, 3);

                }
                else{
                        do{
                                previous=draftptr;
                                draftptr=draftptr->next;
                                i++;
                                if(draftptr->next==NULL)
                                {
                                        draftptr=*draft_list;
                                        fscanf(teamC, "%d", &ID);
                                        i=0;
                                }

                        }while(draftptr->player.player_ID != ID);

                        if(draftptr->player.player_ID == ID)
                        {
                                ptrC->next=NULL;
                                ptrC->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                                strcpy(ptrC->player.Full_Name, draftptr->player.Full_Name);
                                ptrC->player.player_ID=draftptr->player.player_ID;
                                ptrC->player.batting_rating=draftptr->player.batting_rating;
                                ptrC->player.defense_rating=draftptr->player.defense_rating;
                                ptrC->player.pitching_rating=draftptr->player.pitching_rating;

                        ptrC->next=(void*)malloc(sizeof(node_t)); //malloc space for the next pointer
                        ptrC=ptrC->next; //bump
                        ptrC->next=NULL; //set next to null

                                temp=draftptr;
                                        if(i==0)
                                        {
                                                (*draft_list)=(*draft_list)->next;
                                        }
                                draftptr=draftptr->next;
                                previous->next=draftptr;
                                free(temp->player.Full_Name);
                                free(temp);

                                printf("***TEAM C***\n");
                                output_draft(head_a, head_b, head_c, *draft_list, ID, 3);
                        }
                }
}//end if(!feof(teamC);
j++;
}//end while
while(ptrA->next != NULL)
{
        ptrA=ptrA->next;
}
        if(ptrA->next == NULL)
        {
                temp=ptrA->next;
                free(temp);
        }
while(ptrB->next != NULL)
{
        ptrB=ptrB->next;
}

        if(ptrB->next==NULL)
        {
                temp=ptrB->next;
                free(temp);
        }

while(ptrC->next != NULL)
{
        ptrC=ptrC->next;
}
        if(ptrC->next==NULL)
        {
                temp=ptrC->next;
                free(temp);
        }
fclose(teamA);
fclose(teamB);
fclose(teamC);
return;
}//end Draft

void output_draft(node_t** head_a, node_t** head_b, node_t** head_c, node_t* list, int ID, int team)
{
        node_t* tA=*head_a;
        node_t* tB=*head_b;
        node_t* tC=*head_c;
        switch(team){
                case 1:
                {
                        printf("Drafts ID %d -> Team A: [%d]\n", ID, ID);
                        while(tA->next!=NULL)
                        {
                                printf("%.d   ", tA->player.player_ID);
                                tA=tA->next;
                        }
                        printf("\n");
                        while(tB->next!=NULL)
                        {
                                printf("%.d   ", tB->player.player_ID);
                                tB=tB->next;
                        }
                        printf("\n");
                          while(tC->next!=NULL)
                        {
                                printf("%.d   ", tC->player.player_ID);
                                tC=tC->next;
                        }

                        printf("\n");
                //      while(list != NULL)
                //      {
                //              printf("%.d   ", list->player.player_ID);
                //              list=list->next;
                //      }
                break;
                }
                case 2:
                {
                          printf("Drafts ID %d -> Team B: [%d]\n", ID, ID);
                           while(tA->next!=NULL)
                        {
                                printf("%.d   ", tA->player.player_ID);
                                tA=tA->next;
                        }
                        printf("\n");
                        while(tB->next !=NULL)
                        {
                                printf("%.d   ", tB->player.player_ID);
                                tB=tB->next;
                        }
                        printf("\n");
                          while(tC->next !=NULL)
                        {
                                printf("%.d   ", tC->player.player_ID);
                                tC=tC->next;
                        }

                          printf("\n");
                       //  while(list != NULL)
                       //  {
                       //         printf("%.d   ", list->player.player_ID);
                       //         list=list->next;
                       //  }
                break;
                }
                case 3:
                {
                          printf("Drafts ID %d -> Team C: [%d]\n", ID, ID);
                         while(tA->next!=NULL)
                        {
                                printf("%.d   ", tA->player.player_ID);
                                tA=tA->next;
                        }
                        printf("\n");
                        while(tB->next !=NULL)
                        {
                                printf("%.d   ", tB->player.player_ID);
                                tB=tB->next;
                        }
                        printf("\n");
                          while(tC->next !=NULL)
                        {
                                printf("%.d   ", tC->player.player_ID);
                                tC=tC->next;
                        }

                        printf("\n");
                      //  while(list != NULL)
                      //  {
                      //          printf("%.d   ", list->player.player_ID);
                      //          list=list->next;
                      //  }
                break;
                }
                }
return;
}


void Free_List(node_t* linked_list)
{
        node_t* temp=NULL;

        while(linked_list!= NULL)
        {
                temp=linked_list;
                linked_list=linked_list->next;
                free(temp->player.Full_Name);
                free(temp);
        }
return;
}

double computeAverage(node_t* Team_List)
{
        double avg=0;
        double batting=0;
        double defense=0;
        double pitching=0;
        node_t* head;
        head=Team_List;

        while(head->next != NULL)
        {
                batting += head->player.batting_rating;
                defense += head->player.defense_rating;
                pitching += head->player.pitching_rating;
                head=head->next;
        }

        batting/=3;
        defense/=3;
        pitching /=3;
        avg=(batting+defense+pitching)/(double)3;
return avg;
}

void print_average(double teamA_average, double teamB_average, double teamC_average)
{
        if(teamC_average == teamA_average)
        {
                printf("\n\nTeam A and C tied!\n");
        }
        else if(teamA_average==teamB_average)
        {
                printf("\n\nTeam A and B tied!\n");
        }
        else if(teamC_average==teamB_average)
        {
                printf("\n\nTeam B and C tied!\n");
        }
        else if(teamA_average==teamB_average && teamA_average==teamC_average)
        {
                printf("\n\nThere was a three way tie!\n");
        }
        else if(teamA_average> teamB_average && teamA_average> teamC_average)
        {
                printf("\n\nTeam A won the draft!\n");
        }
        else if(teamB_average> teamA_average && teamB_average> teamC_average)
        {
                printf("\n\nTeam B won the draft!\n");
        }
        else if(teamC_average> teamB_average && teamC_average> teamA_average)
        {
                printf("\n\nTeam C won the draft!\n");
        }
}

void BONUSdraft(node_t** heada, node_t** headb, node_t** headc, node_t** draft_list, char* team_a, char* team_b, char* team_c, char* draft_order)
{
        FILE* teamA; FILE* teamB; FILE* teamC; FILE* bonusList;


        if((teamA=fopen(team_a, "r"))==NULL)
        {
                printf("\nCould not open Team A\n");
                return;
        }
        if((teamB=fopen(team_b, "r"))==NULL)
        {
                printf("\nCould not open Team B\n");
                return;
        }
        if((teamC=fopen(team_c, "r"))==NULL)
        {
                printf("\nCould not open Team C\n");
                return;
        }
        if((bonusList=fopen(draft_order, "r"))==NULL)
        {
                printf("\nCould not open Draft_List.txt\n");
                return;
        }

        node_t* draftptr=(*draft_list); //make utility pointers
        node_t* temp=NULL;
        node_t* ptrA=*heada;
        node_t* ptrB=*headb;
        node_t* ptrC=*headc;
        node_t* previous=NULL;
        char round;
        char newline;
        int i,j=0;
        int ID=0;

while(j<ROUNDS)
{
        if(!feof(bonusList))
        {
                fscanf(bonusList, "%c%c", &round, &newline);
        }

if(round=='A'){ i=0;
                if(!feof(teamA)){
                        draftptr=(*draft_list);
                        fscanf(teamA, "%d", &ID);

                        if(draftptr->player.player_ID==ID)      {
                        ptrA->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                         strcpy(ptrA->player.Full_Name, draftptr->player.Full_Name);
                         ptrA->player.player_ID=draftptr->player.player_ID;
                         ptrA->player.batting_rating=draftptr->player.batting_rating;
                         ptrA->player.defense_rating=draftptr->player.defense_rating;
                         ptrA->player.pitching_rating=draftptr->player.pitching_rating;
                        //copy the value
                                ptrA->next=(void*)malloc(sizeof(node_t));
                                ptrA=ptrA->next;
                                ptrA->next=NULL;

                        temp=draftptr;
                        (*draft_list)=(*draft_list)->next;
                        draftptr=draftptr->next;
                        free(temp->player.Full_Name);
                        free(temp);

                        printf("***TEAM A***\n");
                        output_draft(heada, headb, headc, *draft_list, ID, 1); }
                else {
                          do{
                                previous=draftptr;
                                draftptr=draftptr->next;
                                i++;
                                if(draftptr==NULL){
                                        draftptr=*draft_list;
                                        fscanf(teamA, "%d", &ID);
                                        i=0;
                                 }
                            }while(draftptr->player.player_ID != ID);

                                if(draftptr->player.player_ID == ID){
                                        ptrA->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                                        strcpy(ptrA->player.Full_Name, draftptr->player.Full_Name);
                                        ptrA->player.player_ID=draftptr->player.player_ID;
                                        ptrA->player.batting_rating=draftptr->player.batting_rating;
                                        ptrA->player.defense_rating=draftptr->player.defense_rating;
                                        ptrA->player.pitching_rating=draftptr->player.pitching_rating; //copy the value

                                        ptrA->next=(void*)malloc(sizeof(node_t));
                                        ptrA=ptrA->next;
                                        ptrA->next=NULL;
                                                if(i==0){
                                                        (*draft_list)=(*draft_list)->next;
                                                }
                                        temp=draftptr;
                                        draftptr=draftptr->next;
                                        previous->next=draftptr;
                                        free(temp->player.Full_Name);
                                        free(temp);
                                        ptrA->next=NULL;
                                printf("***TEAM A***\n");
                                output_draft(heada, headb, headc, *draft_list, ID, 1);
                                }
                    }
        printf("\n");
                }//end if (!feorf)
        }//end

        draftptr=(*draft_list);
if(round=='B'){i=0;
        if(!feof(teamB)){
                fscanf(teamB, "%d", &ID);
                 if(draftptr->player.player_ID==ID){     //if ID matches the first node in the draft list{
                        ptrB->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                         strcpy(ptrB->player.Full_Name, draftptr->player.Full_Name);
                         ptrB->player.player_ID=draftptr->player.player_ID;
                         ptrB->player.batting_rating=draftptr->player.batting_rating;
                         ptrB->player.defense_rating=draftptr->player.defense_rating;
                         ptrB->player.pitching_rating=draftptr->player.pitching_rating;  //copy the value

                        ptrB->next=(void*)malloc(sizeof(node_t));
                        ptrB=ptrB->next;
                        ptrB->next=NULL;

                        temp=draftptr;
                        (*draft_list)=(*draft_list)->next;              //move the draft_list in main
                        draftptr=draftptr->next;
                        free(temp->player.Full_Name);
                        free(temp);
                        ptrA->next=NULL;

                         printf("***TEAM B***\n");
                        output_draft(heada, headb, headc, *draft_list, ID, 2);
                }
                else {
                       do{
                                previous=draftptr;
                                draftptr=draftptr->next;
                                i++;
                                if(draftptr==NULL)
                                {
                                        draftptr=*draft_list;
                                        fscanf(teamB, "%d", &ID);
                                        i=0;
                                }
                        }while(draftptr->player.player_ID != ID);

                        if(draftptr->player.player_ID == ID){
                         ptrB->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                         strcpy(ptrB->player.Full_Name, draftptr->player.Full_Name);
                         ptrB->player.player_ID=draftptr->player.player_ID;
                         ptrB->player.batting_rating=draftptr->player.batting_rating;
                         ptrB->player.defense_rating=draftptr->player.defense_rating;
                         ptrB->player.pitching_rating=draftptr->player.pitching_rating; //copy the value

                                ptrB->next=NULL;
                                ptrB->next=(void*)malloc(sizeof(node_t));
                                ptrB=ptrB->next;
                                ptrB->next=NULL;
                                temp=draftptr;
                                        if(i==0){
                                                (*draft_list)=(*draft_list)->next;
                                        }
                                draftptr=draftptr->next;
                                previous->next=draftptr;
                                free(temp->player.Full_Name);
                                free(temp);
                                 printf("***TEAM B***\n");
                                output_draft(heada, headb, headc, *draft_list, ID, 2);
                        }
                     }
        }// end if(!feof)
}///end if round = 'B'
        draftptr=(*draft_list);

if(round=='C'){i=0;
        if(!feof(teamC)){
                fscanf(teamC, "%d", &ID);
                 if(draftptr->player.player_ID==ID){
                        ptrC->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                         strcpy(ptrC->player.Full_Name, draftptr->player.Full_Name);
                         ptrC->player.player_ID=draftptr->player.player_ID;
                         ptrC->player.batting_rating=draftptr->player.batting_rating;
                         ptrC->player.defense_rating=draftptr->player.defense_rating;
                         ptrC->player.pitching_rating=draftptr->player.pitching_rating; //copy the value

                        ptrC->next=(void*)malloc(sizeof(node_t));
                        ptrC=ptrC->next;
                        ptrC->next=NULL;

                        temp=draftptr;
                        (*draft_list)=(*draft_list)->next;
                        draftptr=draftptr->next;
                        free(temp->player.Full_Name);
                        free(temp);

                        printf("***TEAM C***\n");
                        output_draft(heada, headb, headc, *draft_list,  ID, 3);
                }
                else{
                        do{
                                previous=draftptr;
                                draftptr=draftptr->next;
                                i++;
                                if(draftptr==NULL)
                                {
                                        draftptr=*draft_list;
                                        fscanf(teamC, "%d", &ID);
                                        i=0;
                                }
                        }while(draftptr->player.player_ID != ID);

                        if(draftptr->player.player_ID == ID){
                         ptrC->player.Full_Name=(char*)malloc(sizeof(char)*MAX_NAME);
                         strcpy(ptrC->player.Full_Name, draftptr->player.Full_Name);
                         ptrC->player.player_ID=draftptr->player.player_ID;
                         ptrC->player.batting_rating=draftptr->player.batting_rating;
                         ptrC->player.defense_rating=draftptr->player.defense_rating;
                         ptrC->player.pitching_rating=draftptr->player.pitching_rating;
                 //copy the value
                                ptrC->next=(void*)malloc(sizeof(node_t));
                                ptrC=ptrC->next;
                                ptrC->next=NULL;
                                temp=draftptr;
                                        if(i==0)
                                        {
                                                (*draft_list)=(*draft_list)->next;
                                        }
                                draftptr=draftptr->next;
                                previous->next=draftptr;
                                free(temp->player.Full_Name);
                                free(temp);

                                printf("***TEAM C***\n");
                                output_draft(heada, headb, headc, *draft_list, ID, 3);
                        }//end if draftptr==player ID
                   }
        }//end if(!feof(teamC);
}
j++;

}//end while
fclose(teamA);
fclose(teamB);
fclose(teamC);
fclose(bonusList);

while(ptrA->next != NULL)
{
        ptrA=ptrA->next;
}
        if(ptrA->next == NULL)
        {
                temp=ptrA->next;
                free(temp);
        }
while(ptrB->next != NULL)
{
        ptrB=ptrB->next;
}

        if(ptrB->next==NULL)
        {
                temp=ptrB->next;
                free(temp);
        }

while(ptrC->next != NULL)
{
        ptrC=ptrC->next;
}
        if(ptrC->next==NULL)
        {
                temp=ptrC->next;
                free(temp);
        }
return;
}
                                                                  
